/**
 * \file BrewItem.cpp
 */

#include "BrewItem.h"

#include "CustomFormats.h"

#include <stdexcept>

#include <QtCore>
#include <QtSql>

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

/*
 * Helper function to create a field inline.
 */
static QSqlField new_field(const char *name, QVariant::Type type, QVariant item)
{
    QSqlField field;
    field.setName(name);
    field.setType(type);
    field.setValue(item);
    return field;
}

/*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/

BrewItem::BrewItem()
        : name("Gong-Fu Black Tea"), start(15), increment(5), temperature(90), infusions(
                8)
{
}

BrewItem::BrewItem(QString name, int start, int interval, int temp,
        int max_infusions)
        : name(name), start(start), increment(interval), temperature(temp), infusions(
                max_infusions)
{
}

BrewItem::~BrewItem()
{
}

std::ostream& operator<<(std::ostream &stream, BrewItem &rhs)
{
    std::string str = fmt::format("BrewItem({}, {}, {}, {}, {}, {})", rhs.id,
            rhs.name, rhs.start, rhs.increment, rhs.temperature, rhs.infusions);
    stream << str;
    return stream;
}

QDebug& operator<<(QDebug &stream, BrewItem &rhs)
{
    std::string str = fmt::format("BrewItem({}, {}, {}, {}, {}, {})", rhs.id,
            rhs.name, rhs.start, rhs.increment, rhs.temperature, rhs.infusions);
    stream << str.data();
    return stream;
}

/*
 * Public Methods
 */

/*
 * Returns a string to be used as the definition for the field specification of
 * the table.
 */
QString BrewItem::getCreationString()
{
    QStringList stream;
    stream.append("id INTEGER PRIMARY KEY AUTOINCREMENT");
    stream.append("name VARCHAR(1024) NOT NULL");
    stream.append("start INT NOT NULL");
    stream.append("increment INT NOT NULL");
    stream.append("temperature INT NOT NULL");
    stream.append("infusions INT NOT NULL");
    return stream.join(", ");
}

/*
 * Set the item using the record from the current query.
 */
void BrewItem::setRecord(QSqlRecord record)
{
    this->id = record.field("id").value().toInt();
    this->name = record.field("name").value().toString();
    this->start = record.field("start").value().toInt();
    this->increment = record.field("increment").value().toInt();
    this->temperature = record.field("temperature").value().toInt();
    this->infusions = record.field("infusions").value().toInt();
}

/*
 * Return an SQL Record object representing the current object.
 *
 * This will not set the "id" field if the value is invalid so the id can be
 * generated by the database instead.
 */
QSqlRecord BrewItem::getRecord()
{
    QSqlRecord record;
    if (id != -1) {
        record.append(new_field("id", QVariant::Int, this->id));
    }
    record.append(new_field("name", QVariant::String, this->name));
    record.append(new_field("start", QVariant::Int, this->start));
    record.append(new_field("increment", QVariant::Int, this->increment));
    record.append(new_field("temperature", QVariant::Int, this->temperature));
    record.append(new_field("infusions", QVariant::Int, this->infusions));
    return record;
}

/*
 * Return a list of field names.
 */
QStringList BrewItem::getTableFieldNames(bool with_id)
{
    QStringList fields;
    if (with_id) {
        fields.append("id");
    }
    fields.append(
            { "name", "start", "increment", "temperature", "infusions" });
    return fields;
}

/*
 * Return the list of field names as a string to be used in a query.
 */
QString BrewItem::getTableFields(bool with_id)
{
    return BrewItem::getTableFieldNames(with_id).join(", ");
}

/*
 * Returns a list of row items to be used in a loop or other such automated
 * action.
 */
QList<QVariant> BrewItem::getTableRowItems(bool with_id)
{
    QList<QVariant> items;
    if (with_id) {
        items.append(this->id);
    }
    items.append( { this->name, this->start, this->increment, this->temperature,
        this->infusions });
    return items;
}

/*
 * Return the item as a string representing the table's row.
 */
QString BrewItem::getTableRow(bool with_id)
{
    std::string row;
    if (with_id) {
        row = fmt::format("{}, '{}', {}, {}, {}, {}", this->id, this->name,
                this->start, this->increment, this->temperature,
                this->infusions);
    }
    else {
        row = fmt::format("'{}', {}, {}, {}, {}", this->name, this->start,
                this->increment, this->temperature, this->infusions);
    }
    return QString(row.data());
}

/*
 * Static Methods
 */

/*
 * Returns a default item to be used in case there isn't anything else.
 */
BrewItem BrewItem::defaultBrewItem()
{
    return BrewItem("Gong-Fu Black Tea", 15, 5, 90, 8);
}
